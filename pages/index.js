import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { useState, useEffect } from 'react';
import { NFC, Ndef, NFCOriginal } from '@awesome-cordova-plugins/nfc';
import { IonButton, IonFabButton, IonHeader, IonInput, IonText, IonList } from '@ionic/react';
import { Capacitor } from '@capacitor/core';
import { TextHelper } from '@awesome-cordova-plugins/nfc';
import ReadNfc from '../components/ReadNfc'
import WriteNfc from '../components/WriteNfc'
import Keys from '../components/Keys'
import styles from '../styles/Home.module.css'
import { writeDataToPreferences, readDataFromPreferences, deleteAllDataFromPreferences, deleteDataFromPreferences, readAllDataFromPreferences } from "../util/storage.service"
import Link from 'next/link';
import { useSession, signOut } from "next-auth/react"
// import styles from '../styles/global.css'
import { useRouter } from "next/router";

import useSWR from 'swr'
import Loading from '@/components/Loading';
import Loading2 from '@/components/Loading2';
const inter = Inter({ subsets: ['latin'] })

export default function Home() {
	
	const router = useRouter();
	const [popup, setPopup] = useState(false);
	const [inputValue, setInputValue] = useState('');
	const [inputKey, setInputKey] = useState('');
	const [isInputInvalid, setIsInputInvalid] = useState(false);
	const [keys, setKeys] = useState({ keys: [], values: [] });
	const [keyPopup, setKeyPopup] = useState(false);
	const [status, setStatus] = useState('')
	const { data: session, status: sessionStatus } = useSession()
	
	const fetcher = (url) => fetch(url).then(res => res.json())
	const { data, error, isLoading } = useSWR(`https://remar360.vercel.app/api/planetscale/booking/getUserBookings?userId=${session?.user.id}`, fetcher)
	console.log("DATA", data)
	console.log("SESSION", session?.user.id)
	useEffect(() => {
		const fetchData = async () => {
			const data = await readAllDataFromPreferences();
			setKeys(data);
		};
		fetchData();
	}, []);

	if(!session) 
		router.push("/auth/login")
		
	if(isLoading) 
		return <Loading2></Loading2>



	const handleAddKey = async () => {

		if (inputValue.length < 12 || inputKey <= 0)
			setIsInputInvalid(true);
		else {
			setIsInputInvalid(false);
			await writeDataToPreferences(inputKey, inputValue)
			const data = await readAllDataFromPreferences();
			setKeys(data);
			setPopup(false);
			setInputKey('');
			setInputValue('');
		}
	}

	const handleDeleteAll = async () => {
		await deleteAllDataFromPreferences();
		setKeys({ keys: [], values: [] });
	}

	const handleCancel = () => {
		setPopup(false);
		setIsInputInvalid(false);
		setInputKey('');
		setInputValue('');
	}
	return (
		<>
			<Head>
				<title>Remar NFC</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="stylesheet" href="../styles/global.css" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			
			{keyPopup && <div className='absolute z-10 w-screen h-screen bg-black opacity-50'></div>}
            {keyPopup && <div className='absolute z-20 flex flex-col items-center justify-center w-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg shadow-md top-1/2 left-1/2 h-1/6'>
                    <div className='flex flex-col justify-around w-full h-full px-4'>
                        <h2 className='text-center text-purple-dark'>{status}</h2>
						<div className='flex justify-center w-full'>
                        	<IonButton className='w-full' color="graylight" onClick={()=>setKeyPopup(false)}>Cancel</IonButton>
                        </div>
					</div>
                </div>
                }
			{popup && <div className='absolute z-10 w-screen h-screen bg-black opacity-50'></div>}
			{popup && <div className='absolute z-20 flex flex-col items-center justify-center w-2/3 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg shadow-md top-1/2 left-1/2 h-1/3'>
			<div className='flex flex-col justify-between w-full h-full px-2 py-2'>
				<div className='flex flex-col w-full gap-1 px-4 pt-3'>
					<h2 className='text-purple-dark'>Name:</h2>
					<IonInput placeholder='Home' maxlength='32'
						value={inputKey} onIonChange={(e) => setInputKey(e.target.value)}></IonInput>
					<h2 className='mt-3 text-purple-dark'>Code:</h2>
					<IonInput placeholder='123456789ABC' maxlength='12'
						value={inputValue} onIonChange={(e) => setInputValue(e.target.value)}></IonInput>
					{isInputInvalid && <h2 className='text-red-500'>Error, below 12 digits</h2>}
				</div>
				<div className='flex flex-row w-full px-4 h-14'>
					<IonButton className='w-1/2 h-10 mx-2' color="graylight" onClick={handleCancel}>Cancel</IonButton>
					<IonButton className='w-1/2 h-10 mx-2' color="dark-purple" onClick={handleAddKey}>Add</IonButton>
				</div>
			</div>
			</div>
			}

			<div className='flex flex-col items-center w-screen h-screen'>
				<div className='flex items-center justify-center w-full'>
					<h1 className='self-center py-3 text-3xl font-bold text-purple-dark' id="lol">RemarNFC</h1>
					<Link
						href="/auth/login"
						onClick={() => signOut()}
						className={`fixed items-center px-2 py-2 text-md underline right-0`}>
						Logout
					</Link>
				</div>
				<div className='items-center justify-center w-screen h-screen overflow-auto border'>
					{/* <IonList>
						{keys.values.map((item) => (

							<Keys key={item.value} keyPopup={keyPopup} setKeyPopup={setKeyPopup} status={status} setStatus={setStatus} obj={{ key: item.key, value: item.value }}></Keys>
						))}
					</IonList> */}
					<IonList>
						{data?.userBookings.map(({id, aptId, pinCode, userId, aptName}) => (

							<Keys key={id} keyPopup={keyPopup} setKeyPopup={setKeyPopup} status={status} setStatus={setStatus} obj={{ bookingId: id, pinCode: pinCode, aptName }}></Keys>
						))}
					</IonList>
				</div>
				{/* <div className='grid grid-cols-2 h-[10%] items-center w-screen'>
					<IonButton className='text-[18px] w-full h-full rounded-none font-semibold' color="graylight" onClick={handleDeleteAll}
					> <span class="mb-0">Delete All</span></IonButton>
					<IonButton className='text-[18px] w-full h-full rounded-none font-semibold' color="dark-purple"
						onClick={
							() => { setPopup(true) }}
					>  <span class="mb-0">Add Key</span>
					</IonButton>
				</div> */}
			</div>

		</>
	)
}

//Replace NfcPlugin inside android studio with NfcPluginReplacement.txt ==> https://github.com/escully27/phonegap-nfc-android-12/blob/master/src/android/src/com/chariotsolutions/nfc/plugin/NfcPlugin.java
